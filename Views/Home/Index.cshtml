@{
    ViewData["Title"] = "Home Page";
} 
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <h1 style="text-align: center;">부산시 병원 및 약국 위치</h1>
    <div id="map" style="width:1400px;height:600px;"></div>
    <script
      type="text/javascript"
      src="https://dapi.kakao.com/v2/maps/sdk.js?appkey=e8cd989b08029fd386a50d3915bd247b&libraries=clusterer"
    ></script>
    <script>
      const url =
        'https://apis.data.go.kr/6260000/MedicInstitService/MedicalInstitInfo?serviceKey=f0iphuLGFLeTKFPvNQ%2F06c79PlnJ6XuTGw1iEzrajf7AD7dZIhJboektJtczaQGU00ceR4Xzir5LZIeDzWObgQ%3D%3D&pageNo=1&numOfRows=1000&resultType=json';

      // 인포윈도우를 표시하는 클로저를 만드는 함수
      function makeOverListener(map, marker, infowindow) {
        return function () {
          infowindow.open(map, marker);
        };
      }

      // 인포윈도우를 닫는 클로저를 만드는 함수
      function makeOutListener(infowindow) {
        return function () {
          infowindow.close();
        };
      }

      var mapContainer = document.getElementById("map"), // 지도를 표시할 div
        mapOption = {
          center: new kakao.maps.LatLng(35.12000584, 129.0176037), // 지도의 중심좌표
          level: 3, // 지도의 확대 레벨
        };

      var map = new kakao.maps.Map(mapContainer, mapOption);

      var clusterer = new kakao.maps.MarkerClusterer({
        map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체
        averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정
        minLevel: 5, // 클러스터 할 최소 지도 레벨
      });

      fetch(url)
        .then((res) => res.json())
        .then((myJson) => {
          var markers = [];
          const stores = myJson.MedicalInstitInfo.body.items.item;
          @* console.log(JSON.stringify(myJson, null, 1));

          console.log(stores); *@
          let today=new Date();
          let day=today.getDay(); //0 :일  ~ 6 : 토
          let current_time=today.getHours()+":"+today.getMinutes()//시:분
          var value;
          function getTimefun(val) {
            var to_get_day_time;
            switch (val){
            case 0: 
              to_get_day_time = stores[i]["Sunday"];
              break; 
            case 1:
              to_get_day_time = stores[i]["Monday"];
              break;
            case 2:
              to_get_day_time = stores[i]["Tuesday"]; 
              break;
            case 3:
              to_get_day_time = stores[i]["Wednesday"]; 
              break;
            case 4:
              to_get_day_time = stores[i]["Thursday"]; 
              break;
            case 5:
              to_get_day_time = stores[i]["Friday"]; 
              break; 
            case 6:
              to_get_day_time = stores[i]["Saturday"]; 
              break;
          }
          return to_get_day_time;
        }
          function checkTime(val) {
            var check_time=val.split('~');//10:00,21:00
            if (parseInt(check_time[0].split(':')[0])==null || parseInt(check_time[0].split(':')[0])==0){
              value="CLOSE"
            } else if (parseInt(current_time.split(':')[0])>parseInt(check_time[0].split(':')[0]) && parseInt(current_time.split(':')[0])<parseInt(check_time[1].split(':')[0])){
              value="OPEN"
            } else if (parseInt(current_time.split(':')[0])==parseInt(check_time[0].split(':')[0])){
              value=current_time.split(':')[1]>check_time[0].split(':')[1]?"OPEN":"CLOSE";
            } else if (parseInt(current_time.split(':')[0])==parseInt(check_time[1].split(':')[0])){
              value=current_time.split(':')[1]<check_time[1].split(':')[1]?"OPEN":"CLOSE";
            } else {
              value="CLOSE";
            }
          
          return value;
          }
          for (var i = 0; i < stores.length; i++) {
            var marker = new kakao.maps.Marker({
              position: new kakao.maps.LatLng(stores[i]["lat"], stores[i]["lng"]),
              map: map,
            });
          

            checkTime(getTimefun(day));
            var iwContent = stores[i]["instit_nm"]+'<br>'+value;

            var infowindow = new kakao.maps.InfoWindow({
              content: iwContent
            });

            markers.push(marker);

            kakao.maps.event.addListener(marker, "mouseover", makeOverListener(map, marker, infowindow));
            kakao.maps.event.addListener(marker, "mouseout", makeOutListener(infowindow));
          }

          clustererjm .addMarkers(markers);
        });
    </script>
  </body>
</html>


